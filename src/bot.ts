// import { Telegraf, Markup, Context } from "telegraf";
// import dotenv from "dotenv";
// import { ExpenseStat } from "./types";
// import { initDb, openDb } from "./db";

// dotenv.config();

// export const CATEGORIES = ["–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–ü—Ä–æ–¥—É–∫—Ç—ã", "–ê–≤—Ç–æ", "–ö—Ä–µ–¥–∏—Ç—ã"];

// const STATISTICS_BUTTON = "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É";
// const RESET_BUTTON = "–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É";

// const userStates = new Map<number, string>();

// const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN as string);

// // === –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å—ë –≤ —Ñ—É–Ω–∫—Ü–∏—é ===
// async function startBot() {
//   // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
//   await initDb();

//   bot.start((ctx: Context) => {
//     return ctx.reply(
//       "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –ø–æ –ø–æ–¥—Å—á–µ—Ç—É —Ç—Ä–∞—Ç –∑–∞ –º–µ—Å—è—Ü. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
//       Markup.inlineKeyboard([
//         CATEGORIES.map((category) =>
//           Markup.button.callback(category, category)
//         ),
//         [
//           Markup.button.callback(STATISTICS_BUTTON, "statistics"),
//           Markup.button.callback(RESET_BUTTON, "reset"),
//         ],
//       ])
//     );
//   });

//   // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
//   bot.action(CATEGORIES, (ctx) => {
//     const category = ctx.match[0];
//     const userId = ctx.from?.id;

//     if (!userId || !CATEGORIES.includes(category)) return;

//     userStates.set(userId, category);

//     return ctx.reply(
//       `–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '${category}'. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:`,
//       Markup.removeKeyboard()
//     );
//   });

//   // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã —Ç—Ä–∞—Ç
//   bot.on("text", async (ctx) => {
//     const userId = ctx.from?.id;
//     const text = ctx.message.text;

//     if (!userId) return;

//     const category = userStates.get(userId);

//     if (!category) {
//       return ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é!");
//     }

//     const amount = parseFloat(text);

//     if (isNaN(amount)) {
//       return ctx.reply("–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ! –í–≤–µ–¥–∏ —á–∏—Å–ª–æ");
//     }

//     const db = await openDb();
//     await db.run(
//       `INSERT INTO expenses (user_id, category, amount) VALUES (?, ?, ?)`,
//       userId,
//       category,
//       amount
//     );

//     userStates.delete(userId);

//     return ctx.reply(
//       `–¢—Ä–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${category} –Ω–∞ ${amount} —Ä—É–±. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É?`,
//       Markup.inlineKeyboard([
//         CATEGORIES.map((category) =>
//           Markup.button.callback(category, category)
//         ),
//         [
//           Markup.button.callback(STATISTICS_BUTTON, "statistics"),
//           Markup.button.callback(RESET_BUTTON, "reset"),
//         ],
//       ])
//     );
//   });

//   // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
//   bot.action("statistics", async (ctx) => {
//     const userId = ctx.from?.id;
//     if (!userId) return;

//     const db = await openDb();
//     const stats = await db.all<ExpenseStat[]>(
//       `
//         SELECT category, SUM(amount) as total
//         FROM expenses
//         WHERE user_id = ?
//         GROUP BY category
//       `,
//       userId
//     );

//     if (stats.length === 0) {
//       return ctx.reply("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Ç—Ä–∞—Ç.");
//     }

//     let message = "–í–∞—à–∏ —Ç—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n";
//     stats.forEach((row: { category: string; total: number }) => {
//       message += `${row.category}: ${row.total} —Ä—É–±.\n`;
//     });

//     return ctx.reply(
//       message,
//       Markup.inlineKeyboard([
//         CATEGORIES.map((category) =>
//           Markup.button.callback(category, category)
//         ),
//         [
//           Markup.button.callback(STATISTICS_BUTTON, "statistics"),
//           Markup.button.callback(RESET_BUTTON, "reset"),
//         ],
//       ])
//     );
//   });

//   // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
//   bot.action("reset", async (ctx) => {
//     const userId = ctx.from?.id;
//     if (!userId) return;

//     const db = await openDb();
//     await db.run(`DELETE FROM expenses WHERE user_id = ?`, userId);

//     return ctx.reply(
//       "–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞.",
//       Markup.inlineKeyboard([
//         CATEGORIES.map((category) =>
//           Markup.button.callback(category, category)
//         ),
//         [
//           Markup.button.callback(STATISTICS_BUTTON, "statistics"),
//           Markup.button.callback(RESET_BUTTON, "reset"),
//         ],
//       ])
//     );
//   });

//   // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∫–æ–Ω—Ü–µ –¥–Ω—è
//   async function sendDailyStatistics() {
//     const currentTime = new Date();
//     const currentHour = currentTime.getHours();
//     const currentMinute = currentTime.getMinutes();

//     if (currentHour === 21 && currentMinute === 59) {
//       const db = await openDb();
//       const users = await db.all<{ user_id: number }[]>(
//         `SELECT DISTINCT user_id FROM expenses`
//       );

//       for (const user of users) {
//         const userId = user.user_id;
//         const stats = await db.all<ExpenseStat[]>(
//           `
//             SELECT category, SUM(amount) as total
//             FROM expenses
//             WHERE user_id = ?
//             GROUP BY category
//           `,
//           userId
//         );

//         if (stats.length === 0) continue;

//         let message = "–í–∞—à–∏ —Ç—Ä–∞—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n";
//         stats.forEach((row: { category: string; total: number }) => {
//           message += `${row.category}: ${row.total} —Ä—É–±.\n`;
//         });

//         try {
//           await bot.telegram.sendMessage(userId, message);
//         } catch (error) {
//           console.error(
//             `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`,
//             error
//           );
//         }
//       }
//     }
//   }

//   setInterval(sendDailyStatistics, 60000);

//   bot.launch({
//     webhook: {
//       domain: "https://family-budget-tg-bot.vercel.app",
//       path: "/api/telegram",
//     },
//   });
// }

// // –ó–∞–ø—É—Å–∫–∞–µ–º
// startBot().catch(console.error);

// export default bot;
import { Telegraf } from "telegraf";
import { BOT_TOKEN } from "./env";

export const bot = new Telegraf(BOT_TOKEN);

// –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞
bot.start((ctx) => ctx.reply("–ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–±–æ—Ç–∞—é —á–µ—Ä–µ–∑ Webhook –Ω–∞ Vercel üöÄ"));
bot.command("ping", (ctx) => ctx.reply("pong üèì"));
bot.on("text", (ctx) => ctx.reply(`–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: ${ctx.message.text}`));

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Vercel
